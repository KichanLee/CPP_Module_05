연습 01: 자세를 가다듬어라, 구더기들아!
연습 : 01 구더기야, 일어나!
제출 디렉토리 : ex01/
제출할 파일 : 이전 연습의 파일 + Form.{h, hpp}, Form.cpp 금지된 함수 : None
이제 관료들이 생겼으니 그들에게 할 일을 주자고요. 양식 더미를 채우는 것보다 더 좋은 활동이 있을까요?
그런 다음 Form 클래스를 만들어 봅시다. 이미 있습니다:
- 상수 이름.
- 서명 여부를 나타내는 부울입니다(작성 시에는 서명하지 않음). - 서명하는 데 필요한 상수 등급.
- 그리고 이를 실행하는 데 필요한 상수 등급.
이러한 모든 속성은 비공개이며 보호되지 않습니다.
양식의 등급은 관료에게 적용되는 것과 동일한 규칙을 따릅니다.
 따라서 양식의 성적이 범위를 벗어나는 경우 다음과 같은 예외가 발생합니다: 
 Form::GradeTooHighException 및 Form::GradeTooLowException.
이전과 동일하게 모든 속성에 대한 게터를 작성하고 양식의 모든 정보를 인쇄하는 삽입(") 연산자의 오버로드를 작성합니다.

C++ - 모듈 05 반복과 예외
Bureaucrat를 매개변수로 받는 beSigned() 멤버 함수도 Form에 추가합니다. 
이 함수는 관료의 등급이 충분히 높으면(요구되는 등급보다 높거나 같으면) 양식의 상태를 서명됨으로 변경합니다. 
1등급이 2등급보다 높다는 것을 기억하세요.
성적이 너무 낮으면 Form::GradeTooLowException을 던집니다.
마지막으로, 관료에 signForm() 멤버 함수를 추가합니다. 폼이 서명되면 다음과 같이 인쇄됩니다:
   <관료>가 <양식>에 서명했습니다.
그렇지 않으면 다음과 같이 출력됩니다:
<관료>가 <이유> 때문에 <양식>에 서명할 수 없습니다.
몇 가지 테스트를 구현하고 제출하여 모든 것이 예상대로 작동하는지 확인하세요.

Translated with DeepL.com (free version)

=============================================================================

Exercise 01: Form up, maggots!
Exercise : 01 Form up, maggots!
Turn-in directory : ex01/
Files to turn in : Files from previous exercise + Form.{h, hpp}, Form.cpp Forbidden functions : None
Now that you have bureaucrats, let’s give them something to do. What better activity could there be than the one of filling out a stack of forms?
Then, let’s make a Form class. It has:
• A constant name.
• A boolean indicating whether it is signed (at construction, it’s not). • A constant grade required to sign it.
• And a constant grade required to execute it.
All these attributes are private, not protected.
The grades of the Form follow the same rules that apply to the Bureaucrat.
 Thus, the following exceptions will be thrown if a form grade is out of bounds: Form::GradeTooHighException and Form::GradeTooLowException.
Same as before, write getters for all attributes and an overload of the insertion («) operator that prints all the form’s informations.
       7
 C++ - Module 05 Repetition and Exceptions
 Add also a beSigned() member function to the Form that takes a Bureaucrat as parameter. It changes the form status to signed if the bureaucrat’s grade is high enough (higher or egal to the required one). Remember, grade 1 is higher than grade 2.
If the grade is too low, throw a Form::GradeTooLowException.
Lastly, add a signForm() member function to the Bureaucrat. 
If the form got signed, it will print something like:
   <bureaucrat> signed <form>
Otherwise, it will print something like:
<bureaucrat> couldn’t sign <form> because <reason>.
Implement and turn in some tests to ensure everything works as expected.