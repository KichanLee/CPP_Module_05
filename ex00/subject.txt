
예외 클래스는 다음과 같이 디자인할 필요가 없습니다.
정통 정석 형태로 디자인할 필요는 없습니다. 하지만 다른 모든 클래스는 반드시 그래야 합니다.
사무실, 복도, 양식, 대기열로 구성된 인위적인 악몽을 디자인해 봅시다.
재미있나요? 재미없나요? 유감입니다.
먼저, 이 거대한 관료주의 기계의 가장 작은 톱니바퀴인 관료부터 시작하세요.
관료에게는 반드시 있어야 합니다:
- 일정한 이름.
- 그리고 1(최고 등급)에서 150(최저 등급)까지의 등급이 있어야 합니다.
등급).
잘못된 등급을 사용해 관료 인스턴스화를 시도하면 예외가 발생해야 합니다:
Bureaucrat::GradeTooHighException 
Bureaucrat::GradeTooLowException이 발생합니다.
C++ - 모듈 05 반복 및 예외
이 두 속성에 대한 getName() 및 getGrade() 함수를 제공합니다.
또한 관료 성적을 늘리거나 줄이는 두 개의 멤버 함수를 구현합니다. 
만약 등급이 범위를 벗어나면 두 함수 모두 생성자와 동일한 예외를 발생시킵니다.
기억하세요. 1등급이 가장 높고 150등급이 가장 낮기 때문에
3등급을 올리면 관료에게 2등급을 주어야 합니다.
던져진 예외는 try 및 catch 블록을 사용하여 잡을 수 있어야 합니다:
try
{
/* 관료와 함께 뭔가를 하세요 */.
}
catch (std::예외 & e)
{
/* 예외 처리 */ }
}
삽입(") 연산자의 오버로드를 구현하여 다음과 같은 내용을 출력합니다.
(꺾쇠 괄호 없이):
<이름>, 관료 등급 <등급>.
평소와 같이 몇 가지 테스트를 통해 모든 것이 예상대로 작동하는지 확인합니다.

Translated with DeepL.com (free version)


Please note that exception classes don’t have to be designed in
Orthodox Canonical Form. But every other class has to.
Let’s design an artificial nightmare of offices, corridors, forms, and waiting queues.
Sounds fun? No? Too bad.
First, start by the smallest cog in this vast bureaucratic machine: the Bureaucrat.
A Bureaucrat must have:
• A constant name.
• And a grade that ranges from 1 (highest possible grade) to 150 (lowest possible
grade).
Any attempt to instantiate a Bureaucrat using an invalid grade must throw an exception:
either a Bureaucrat::GradeTooHighException or a Bureaucrat::GradeTooLowException.
5
C++ - Module 05 Repetition and Exceptions
You will provide getters for both these attributes: getName() and getGrade(). Implement also two member functions to increment or decrement the bureaucrat grade. If
the grade is out of range, both of them will throw the same exceptions as the constructor.
Remember. Since grade 1 is the highest one and 150 the lowest,
incrementing a grade 3 should give a grade 2 to the bureaucrat.
The thrown exceptions must be catchable using try and catch blocks:
try
{
/* do some stuff with bureaucrats */
}
catch (std::exception & e)
{
/* handle exception */
}
You will implement an overload of the insertion («) operator to print something like
(without the angle brackets):
<name>, bureaucrat grade <grade>.
As usual, turn in some tests to prove everything works as expected