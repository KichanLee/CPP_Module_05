연습 02: 아니요, 양식 28B가 필요합니다,
28C가 아니라...
운동 : 02
아니요, 28C가 아니라 28B 양식이 필요합니다...
제출 디렉토리 : ex02/
제출할 파일 : Makefile, main.cpp, Bureaucrat.[{h, hpp},cpp],
Bureaucrat.cpp +
AForm.[{h, hpp},cpp], ShrubberyCreationForm.[{h, hpp},cpp], +
RobotomyRequestForm.[{h, hpp},cpp], PresidentialPardonForm.[{h, hpp},cpp]
금지된 함수 : None
이제 기본 폼을 만들었으니 실제로 무언가를 수행하는 폼을 몇 개 더 만들어 보겠습니다.
모든 경우에 기본 클래스 Form은 추상 클래스여야 하므로, 반드시
AForm으로 이름을 바꿔야 합니다. 폼의 어트리뷰트는 비공개로 유지되어야 하고
베이스 클래스에 있다는 것을 명심하세요.
다음과 같은 구체적인 클래스를 추가합니다:
- 관목 생성 양식: 필수 등급: 서명 145, 실행 137
작업 디렉터리에 <target>_shrubbery 파일을 만들고 그 안에 ASCII 트리(
를 작성합니다.
- 로봇수술 요청 양식: 필수 성적: 서명 72, 실행 45
약간의 드릴링 소리를 냅니다. 그런 다음 <대상>이 로봇화되었음을 알립니다.
50% 성공했음을 알립니다. 그렇지 않으면 로봇 수술이 실패했음을 알립니다.
- 대통령 사면 양식: 필수 등급: 서명 25, 실행 5
<대상>이 자포드 비블브록스에 의해 사면되었음을 알립니다.
이들 모두 생성자에는 양식의 대상이라는 매개변수 하나만 받습니다. 예를 들어
예를 들어, 집에 관목을 심고 싶다면 "home".
9
C++ - 모듈 05 반복과 예외
이제 기본 폼에 execute(Bureaucrat const & executor) const 멤버 함수를 추가합니다.
베이스 폼에 추가하고 폼의 구체적인 동작을 실행하는 함수를 구현합니다.
클래스를 추가합니다. 폼에 서명이 되어 있는지, 폼을 실행하려는 관료의 등급은
의 등급이 충분히 높은지 확인해야 합니다. 그렇지 않으면 적절한 예외를 던지세요.
모든 구체적인 클래스에서 요구 사항을 확인할지 아니면 기본 클래스에서 확인할지 여부는
클래스에서 요구 사항을 확인할지(다른 함수를 호출하여 양식을 실행할지) 여부는 사용자에게 달려 있습니다. 
하지만 한 가지 방법은가 다른 방법보다 낫습니다.
마지막으로, 관료에 executeForm(AForm const & form) 멤버 함수를 추가합니다. 
이 함수는 폼을 실행하려고 시도해야 합니다. 성공하면 다음과 같이 출력합니다:
<관료>가 <양식>을 실행했습니다.
그렇지 않으면 명시적인 오류 메시지를 인쇄합니다.
몇 가지 테스트를 구현하고 제출하여 모든 것이 예상대로 작동하는지 확인합니다.

Translated with DeepL.com (free version)



=================================================================



Exercise 02: No, you need form 28B,
not 28C...
Exercise : 02
No, you need form 28B, not 28C...
Turn-in directory : ex02/
Files to turn in : Makefile, main.cpp, Bureaucrat.[{h, hpp},cpp],
Bureaucrat.cpp +
AForm.[{h, hpp},cpp], ShrubberyCreationForm.[{h, hpp},cpp], +
RobotomyRequestForm.[{h, hpp},cpp], PresidentialPardonForm.[{h, hpp},cpp]
Forbidden functions : None
Since you now have basic forms, it’s time to make a few more that actually do something.
In all cases, the base class Form must be an abstract class, and therefore should be
renamed AForm. Keep in mind the form’s attributes need to remain private and that
they are in the base class.
Add the following concrete classes:
• ShrubberyCreationForm: Required grades: sign 145, exec 137
Create a file <target>_shrubbery in the working directory, and writes ASCII trees
inside it.
• RobotomyRequestForm: Required grades: sign 72, exec 45
Makes some drilling noises. Then, informs that <target> has been robotomized
successfully 50% of the time. Otherwise, informs that the robotomy failed.
• PresidentialPardonForm: Required grades: sign 25, exec 5
Informs that <target> has been pardoned by Zaphod Beeblebrox.
All of them take only one parameter in their constructor: the target of the form. For
example, "home" if you want to plant shrubbery at home.
9
C++ - Module 05 Repetition and Exceptions
Now, add the execute(Bureaucrat const & executor) const member function to
the base form and implement a function to execute the form’s action of the concrete
classes. You have to check that the form is signed and that the grade of the bureaucrat
attempting to execute the form is high enough. Otherwise, throw an appropriate exception.
Whether you want to check the requirements in every concrete class or in the base
class (then call another function to execute the form) is up to you. However, one way is
prettier than the other one.
Lastly, add the executeForm(AForm const & form) member function to the Bureaucrat. It must attempt to execute the form. If it’s successful, print something like:
<bureaucrat> executed <form>
If not, print an explicit error message.
Implement and turn in some tests to ensure everything works as expected.